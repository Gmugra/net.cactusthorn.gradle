apply plugin: "java"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileJava.options.encoding = java.nio.charset.StandardCharsets.UTF_8.name()
tasks.withType(JavaCompile) {
    options.encoding = java.nio.charset.StandardCharsets.UTF_8.name()
}

task allJar(type: Jar) {
    group = "build"
    description = "Assembles a jar archive containing both: classes and dependencies."
    classifier = "all"
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task sourcesJar(type: Jar, dependsOn: classes) {
    group = "build"
    description = "Assembles a jar archive containing sources (without unit/integration tests)."
    classifier = "sources"
    from sourceSets.main.allSource
}

tasks.withType(Jar) {
    manifest {
        attributes "Implementation-Version": project.version
        attributes "Implementation-Title": project.name
        attributes "Implementation-Vendor-Id": project.group
        attributes "Build-Jdk": "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})"
        attributes "Build-OS":"${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        attributes "Created-By": "Gradle ${gradle.gradleVersion}"
    }
}

artifacts {
    archives allJar
    archives sourcesJar
}

test {
    //to show test System.out
    /* testLogging.showStandardStreams = true */

    //to show all tests status
    afterTest { desc, result ->
        logger.quiet "Executing unit test \"${desc.name}\" [${desc.className}] with result: ${result.resultType}"
    }
}